from unittest import result

import rotate_me

input_1 = 'current_state.txt'
place_holder = (100,200,300)
input_2 = tuple(float(x) for x in place_holder)
adc_list = []


def txt_to_tuple(input_1):
#######Converts the txt doc to a float tuple#######
#######Suggestions generated by ChatGPT#######
    with open(input_1, 'r') as file:
        content = file.read()
        parts = content.split(",")
        tupl = tuple(parts)
        converted_tuple = tuple(float(x) for x in tupl)
    return converted_tuple
print("-----------------------------------------------------")
print(f"The tuple from the input_1 is {txt_to_tuple(input_1)} and it's "
      f"type is {type(txt_to_tuple(input_1))}")
print(f"TYPE CHECK: Element 0 in input_1 is {txt_to_tuple(input_1)[0]} and is a {type(txt_to_tuple(input_1)[0])}")
print("-----------------------------------------------------")
print(f"The tuple from the input_2 is {input_2} and it's "
      f"type is {type(input_2)}")
print(f"TYPE CHECK: Element 0 in input_2 is {input_2[0]} and is a {type(input_2[0])}")
print("-----------------------------------------------------")

############################################################################################
############################################################################################

#######Appending the two tuples together into a new list#######
#######Suggestions generated by ChatGPT#######
adc_list.append(txt_to_tuple(input_1))
adc_list.append(input_2)

print(f"Appending input_1 and input_2 into a list gives is {adc_list} and it's "
      f"type is {type(adc_list)}")
print(f"TYPE CHECK: Element 0 in the first tuple is {adc_list[0][0]} and is a {type(adc_list[0][0])}")
print(f"TYPE CHECK: Element 0 in the second tuple is {adc_list[1][0]} and is a {type(adc_list[1][0])}")
print("-----------------------------------------------------")

############################################################################################
############################################################################################

def rotation_calculation(adc_list):
#######Subracts each element in one tuple by the corresponding element in the
#######other tuple
#######Suggestions generated by ChatGPT#######
    for tup in adc_list:
        result = tuple(a - b for a, b in zip(adc_list[0], adc_list[1]))
    return result

print(f"Subtracting input_1 from input_2 gives is {rotation_calculation(adc_list)} and it's "
      f"type is {type(rotation_calculation(adc_list))}")
print(f"{adc_list[0][0]} - {adc_list[1][0]} = {rotation_calculation(adc_list)[0]}")
print(f"{adc_list[0][1]} - {adc_list[1][1]} = {rotation_calculation(adc_list)[1]}")
print(f"{adc_list[0][2]} - {adc_list[1][2]} = {rotation_calculation(adc_list)[2]}")
print(f"TYPE CHECK: Element 0 is {rotation_calculation(adc_list)[0]} and is a {type(rotation_calculation(adc_list)[0])}")
print("-----------------------------------------------------")

############################################################################################
############################################################################################

rotate_me.main(rotation_calculation(adc_list))



