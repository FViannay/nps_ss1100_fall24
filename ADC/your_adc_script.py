import rotate_me
from rotation_calculation import rotation_calc

input_1 = 'current_state.txt'

adc_list = [(0,0,0),(0,0,0)] # [(Current State),(Target)]



def read_current_state(filename):
#######Converts the txt doc to a float tuple#######
#######Suggestions generated by ChatGPT#######
    with open(filename, 'r') as file:
        content = file.read()
        parts = content.split(",")
        tupl = tuple(parts)
        converted_tuple = tuple(float(x) for x in tupl)
    return converted_tuple

############################################################################################
############################################################################################

def rotate_satellite(target):
    i = 1
    adc_list[1]=target
    while True:
        # Read current state from file
        adc_list[0] = (read_current_state(input_1))
        print(f"Adjust number {i} ############################")
        print(f"Current state: X = {adc_list[0][0]: .3f} | Y = {adc_list[0][1]: .3f} | Z = {adc_list[0][2]: .3f}")
        print(f"Target Orientation: X = {adc_list[1][0]: .3f} | Y = {adc_list[1][1]: .3f} | Z = {adc_list[1][2]: .3f}")
        # Calculate diference between target and current state
        result = rotation_calc(adc_list)
        #Check if result for each axis is less than 0.1. If so, stops execution
        if abs(result[0]) < 0.1 and  abs(result[1]) < 0.1 and abs(result[2]) < 0.1 :
            print("Current state is within 0.1 of the target value in all three axis.")
            print("#########################################################\n")
            break
        
        print(f"Corrections needed: X = {result[0]: .3f} | Y = {result[1]: .3f} | Z = {result[2]: .3f}")
        # Rotate satellite
        rotate_me.main(result)
        print("#########################################################\n")
        i+=1



rotate_satellite((100,200,300))
rotate_satellite((0,0,0))
rotate_satellite((3,30,300))

